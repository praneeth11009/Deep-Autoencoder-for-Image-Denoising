digitDatasetPath = fullfile(matlabroot,'toolbox','nnet', ...
    'nndemos','nndatasets','DigitDataset');
imds = imageDatastore(digitDatasetPath, ...
    'IncludeSubfolders',true, ...
    'LabelSource','foldernames');

imds.ReadSize = 500;
rng(0)
imds = shuffle(imds);
[imdsTrain,imdsVal,imdsTest] = splitEachLabel(imds,0.95,0.025);

dsTrainNoisy = transform(imdsTrain,@addNoise);
dsValNoisy = transform(imdsVal,@addNoise);
dsTestNoisy = transform(imdsTest,@addNoise);

dsTrain = combine(dsTrainNoisy,imdsTrain);
dsVal = combine(dsValNoisy,imdsVal);
dsTest = combine(dsTestNoisy,imdsTest);

dsTrain = transform(dsTrain,@commonPreprocessing);
dsVal = transform(dsVal,@commonPreprocessing);
dsTest = transform(dsTest,@commonPreprocessing);

dsTrain = transform(dsTrain,@augmentImages);

%{
exampleData = preview(dsTrain);
inputs = exampleData(:,1);
responses = exampleData(:,2);
minibatch = cat(2,inputs,responses);
montage(minibatch','Size',[8 2])
title('Inputs (Left) and Responses (Right)')
%}
%%%%%%%%%%%%%%%

imageLayer = imageInputLayer([32,32,1]);

encodingLayers = [ ...
    convolution2dLayer(6,16,'Padding','same', 'Name', 'conv1'), ... %
    reluLayer, ...
    batchNormalizationLayer, ...
    maxPooling2dLayer(2,'Padding','same','Stride',2,'Name', 'mp1'), ...%16,16,16
    convolution2dLayer(6,32,'Padding','same','Name', 'conv2'), ...%16,16,8
    reluLayer, ...
    batchNormalizationLayer, ...
    maxPooling2dLayer(2,'Padding','same','Stride',2,'Name', 'mp2'), ...%8,8,8
    convolution2dLayer(6,64,'Padding','same','Name', 'conv3'), ...%8,8,8
    reluLayer, ...
    batchNormalizationLayer, ...
    maxPooling2dLayer(2,'Padding','same','Stride',2,'Name', 'mp3')];%4,4,8

decodingLayers = [ ...
    createUpsampleTransponseConvLayer(2,32, 'tconv1'), ...%
    reluLayer, ...    
    batchNormalizationLayer, ...
    createUpsampleTransponseConvLayer(2,16, 'tconv2'), ...
    reluLayer, ...   
    batchNormalizationLayer, ...
    createUpsampleTransponseConvLayer(2,8, 'tconv3'), ...
    reluLayer, ... 
    batchNormalizationLayer, ...
    convolution2dLayer(6,1,'Padding','same','Name', 'dec_conv1'), ...
    clippedReluLayer(1.0), ...
    batchNormalizationLayer, ...
    regressionLayer];    

layers = [imageLayer,encodingLayers,decodingLayers];
%
options = trainingOptions('adam', ...   
    'LearnRateSchedule','piecewise', ...
    'InitialLearnRate',0.002,...
    'LearnRateDropFactor',0.95, ...
    'LearnRateDropPeriod',25, ...
    'MaxEpochs',100, ...
    'MiniBatchSize',100, ...
    'ValidationData',dsVal, ...
    'Shuffle','never', ...
    'Plots','training-progress', ...
    'Verbose',false);

net = trainNetwork(dsTrain,layers,options);

%{
ypred = predict(net,dsTest);
inputImageExamples = preview(dsTest);
montage({inputImageExamples{1},ypred(:,:,:,1)});
ref = inputImageExamples{1,2};
originalNoisyImage = inputImageExamples{1,1};
psnrNoisy = psnr(originalNoisyImage,ref)
psnrDenoised = psnr(ypred(:,:,:,1),ref)
%}